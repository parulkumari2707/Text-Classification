# -*- coding: utf-8 -*-
"""Text_Classification_using_Naive_Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IKBh2k_sQ6hiPwNgmJFSXthBal-5Kx7j

We define a pipeline that includes a feature extraction step (TfidfVectorizer or CountVectorizer) and a Multinomial Naive Bayes classifier.

We define hyperparameters to search over, including different vectorizer options (TfidfVectorizer or CountVectorizer), maximum features, n-gram ranges, and alpha values for Laplace smoothing in the Multinomial Naive Bayes classifier.
"""

from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Load the 20 Newsgroups dataset
categories = ['alt.atheism', 'soc.religion.christian', 'comp.graphics', 'sci.med']
newsgroups_train = fetch_20newsgroups(subset='train', categories=categories, remove=('headers', 'footers', 'quotes'))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(newsgroups_train.data, newsgroups_train.target, test_size=0.2, random_state=42)

# Define pipeline with different preprocessing and feature extraction techniques
pipeline = Pipeline([
    ('vectorizer', TfidfVectorizer()),
    ('clf', MultinomialNB())
])

# Define hyperparameters to search over
parameters = {
    'vectorizer': [TfidfVectorizer(), CountVectorizer()],
    'vectorizer__max_features': [1000, 2000, 3000],
    'vectorizer__ngram_range': [(1, 1), (1, 2)],
    'clf__alpha': [0.1, 0.5, 1.0]
}

# Perform grid search with cross-validation
grid_search = GridSearchCV(pipeline, parameters, cv=5, n_jobs=-1, verbose=1)
grid_search.fit(X_train, y_train)

# Print best parameters and best score
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Evaluate best model on test set
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=newsgroups_train.target_names))

